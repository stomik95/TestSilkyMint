{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","images/SilkyDogImg.png","Components/SilkyDog/SilkyDog.js","Components/Title/Title.js","Components/Subtitle/Subtitle.js","images/social/twitter.svg","images/social/telegramm.svg","images/social/discord.svg","images/goHome/goHome.svg","Components/SocialList/SocialList.js","images/boxes/boxBrown.png","Components/BoxBrown/BoxBrown.js","images/boxes/boxRed.png","Components/BoxRed/BoxRed.js","Components/Main/Main.js","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","SilkyDogAnimate","Container","marginTop","maxWidth","position","bottom","paddingBottom","backgroundColor","boxShadow","src","alt","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","SilkyDog","SilkyDogImg","Title","Subtitle","SocialList","href","twitterLogo","telegrammLogo","discordLogo","goHome","BoxBrown","boxBrownImg","BoxRed","BoxRedImg","Main","children","innerWidth","windowWidth","setWindowWidth","updateWindowSize","addEventListener","removeEventListener","createTheme","palette","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.e9e7dfa8.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#384457\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n                                                              date,\n                                                              status,\n                                                              style,\n                                                              onComplete,\n                                                            }) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n                             days,\n                             hours,\n                             minutes,\n                             seconds,\n                             completed,\n                           }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #f2c777 0%, #ffb218 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { url } from \"inspector\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #f2c777 0%, #ffb218 100%); \n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  const SilkyDogAnimate = styled(\"img\")`\n    width: 100%;\n    height: 350px;\n    border-radius: 5px;\n    margin-bottom: 20px;\n  `\n\n  return (\n    <Container style={{ marginTop: 100}}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\",\n        bottom: '100px'}}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#2c2357\", // Color Main Box\n            borderRadius: 6,\n            boxShadow: \"0px 0px 10px 6px #886fff\",\n          }}\n        >\n          <SilkyDogAnimate src=\"/promo.gif\" alt=\"SilkyAnimate\"/>\n          {/* <Promo /> */}\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                          candyMachine.state.price\n                        )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                                ? \"PRESALE\"\n                                : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                          new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"grey\" }}\n          >\n            Powered by SOLANA\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n        ? new anchor.BN(new Date().getTime() / 1000)\n        : undefined\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/SilkyDogImg.991e4d86.png\";","import React from \"react\";\r\nimport SilkyDogImg from '../../images/SilkyDogImg.png'\r\n\r\nfunction SilkyDog() {\r\n    return (\r\n        <img className=\"SilkyDog\" src={SilkyDogImg} alt='SilkyDogImg'></img>\r\n    )\r\n}\r\nexport default SilkyDog;","import React from \"react\";\n\nconst welcome = 'welcome'\nconst toSilky = 'to silky inu'\n\nfunction Title(){\n  return(\n    <h2 className=\"Header\">{welcome}<br></br> {toSilky}</h2>\n  )\n}\nexport default Title;\n","import React from \"react\";\n\nconst subtitleText = 'SILKY is a unique collection that has 5555 unique NFT silk dogs.'\n\nfunction Subtitle(){\n    return(\n        <h3 className=\"Subtitle\">{subtitleText}</h3>\n    )\n}\nexport default Subtitle;\n","export default __webpack_public_path__ + \"static/media/twitter.0eed05c5.svg\";","export default __webpack_public_path__ + \"static/media/telegramm.637cad7e.svg\";","export default __webpack_public_path__ + \"static/media/discord.acc0c4b1.svg\";","export default __webpack_public_path__ + \"static/media/goHome.b34b4e19.svg\";","import React from \"react\";\nimport twitterLogo from \"../../images/social/twitter.svg\";\nimport telegrammLogo from \"../../images/social/telegramm.svg\";\nimport discordLogo from \"../../images/social/discord.svg\";\nimport goHome from \"../../images/goHome/goHome.svg\"\n\nconst homeText ='BACK HOME'\n\nfunction SocialList() {\n    return (\n        <div className=\"SocialList__container\">\n            <ul className=\"SocialList\">\n                <li className=\"SocialList__element\">\n                    <a href='https://twitter.com/silkyinu'>\n                        <img src={twitterLogo} alt='twitter'></img>\n                    </a>\n                </li>\n                <li className=\"SocialList__element\">\n                    <a href='https://t.me/silkyinu'>\n                        <img src={telegrammLogo} alt='telegramm'></img>\n                    </a>\n                </li>\n                <li className=\"SocialList__element\">\n                    <a href='https://discord.com/invite/Xpe5pUH7'>\n                        <img src={discordLogo} alt='discord'></img>\n                    </a>\n                </li>\n            </ul>\n            <a className=\"SocialList__link\" href='https://silkyinu.com' >\n                <img className=\"SocialList__home\" src={goHome} alt='goHome'></img>\n                <span className=\"SocialList__text\">{homeText}</span>\n            </a>\n        </div>\n    )\n}\nexport default SocialList;\n","export default __webpack_public_path__ + \"static/media/boxBrown.5b6f3cdd.png\";","import React from \"react\";\r\nimport boxBrownImg from '../../images/boxes/boxBrown.png';\r\n\r\nfunction BoxBrown(){\r\n    return(\r\n        <img className=\"BoxBrown\" src={boxBrownImg} alt='boxBrown'></img>\r\n    )\r\n}\r\nexport default BoxBrown;","export default __webpack_public_path__ + \"static/media/boxRed.4642dc2d.png\";","import React from \"react\";\r\nimport BoxRedImg from '../../images/boxes/boxRed.png';\r\n\r\nfunction BoxRed(){\r\n    return(\r\n        <img className=\"BoxRed\" src={BoxRedImg} alt='BoxRedImg'></img>\r\n    )\r\n}\r\nexport default BoxRed;","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport SilkyDog from '../SilkyDog/SilkyDog';\nimport Title from '../Title/Title';\nimport Subtitle from '../Subtitle/Subtitle';\nimport SocialList from '../SocialList/SocialList';\nimport BoxBrown from '../BoxBrown/BoxBrown';\nimport BoxRed from '../BoxRed/BoxRed';\n\n// eslint-disable-next-line react/prop-types\nfunction Main({children}) {\n\n//Отслеживаем разрешение экрана\nconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\nconst updateWindowSize = () => setWindowWidth(window.innerWidth);\nuseEffect(() => {\n  window.addEventListener('resize', updateWindowSize);\n  return () => window.removeEventListener('resize', updateWindowSize);\n})\n\n  return (\n    <div className=\"App\">\n      <main className='App__main'>\n        <div className='App__header'>\n        <SilkyDog />\n        <div className='App__titles'>\n          <Title\n          />\n          <Subtitle/>\n        </div>\n        <SocialList />\n        </div>\n        <div className='App__content'>\n          <div className='App__boxes'>\n          <BoxBrown />\n          {windowWidth <= 1050 && <BoxRed />}\n          </div>\n          {children}\n          {windowWidth > 1050 && <BoxRed />}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Main;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport Main from \"./Components/Main/Main\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Main>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={DEFAULT_TIMEOUT}\n                rpcHost={rpcHost}\n                network={network}\n                error={error}\n              />\n            </Main>\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\r\n);\r\n\r\nexport const CIVIC_GATEKEEPER_NETWORK =\r\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from(\"gateway\"),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n                                              signedTransaction,\n                                              connection,\n                                              timeout = DEFAULT_TIMEOUT,\n                                            }: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}